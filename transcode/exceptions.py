#/usr/bin/env python
'''
Custom exception classes
'''

class CommandException(EnvironmentError):
    
    def __init__(self, msg, cmd, stdout, stderr, ):
        '''
        @param  str     msg     Error Message
        @param  list    cmd     Command list as sent to subprocess
        @param  str     stdout  Stdout stream from program
        @param  str     stderr  Stderr stream from program
        '''
        self.msg = msg
        self.cmd = cmd
        self.stdout = stdout
        self.stderr = stderr
        
    def __repr__(self, ):
        return 'CommandException(msg="%s", cmd=%r, stdout="%s", stderr="%s")' % (
            self.msg, self.cmd, self.stdout, self.stderr
        )
    
    def __str__(self, ):
        return self.msg


class FileFormatError(OSError):
    def __init__(self, msg, path, ):
        '''
        @param  str msg     Error Message
        @param  str path    Path of file that raise error
        '''
        self.msg = msg
        self.path = path
        
    def __repr__(self, ):
        return 'FileFormatError(msg="%s", path="%s")' % (
            self.msg, self.path
        )
    
    def __str__(self, ):
        return "%s on %s" % (self.msg, self.path)
    
    
class OutputParseError(ValueError):
    def __init__(self, msg, parsed, ):
        '''
        @param  str msg     Error Message
        @param  str parsed  String that generated the error
        '''
        self.msg = msg
        self.parsed = parsed
        
    def __repr__(self, ):
        return 'OutputParseError(msg="%s", parsed="%s")' % (
            self.msg, self.parsed
        )
    
    def __str__(self, ):
        return "%s generated by\n%s" % (self.msg, self.parsed)